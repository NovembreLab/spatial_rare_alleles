#!python3

import pandas as pd
import numpy as np


### --------- Configuration Information ---------- ###
configfile: "config.yaml"
chroms = [f"chr{i}" for i in range(1, 23)]


### --------- Setting up the targets for the workflow -------- ###
seed = 42
seedlist = range(1,21)
TARGETS = []

for seed in seedlist:
    TARGETS.append(
        f"../results/subsample_sfs/ukb_center/uniform.newcastle.merged.ukb_exomes.all.seed{seed}.nsamp{config['UKBB_EXOMES']['scenarios']['newcastle']['n']}.sfs.tsv.gz",
    )

# Just get the unique targets for the pipeline if possible.
TARGETS = np.unique(TARGETS).tolist()

rule all:
    input:
        TARGETS,

# ----------- 2. UKBB Whole Exomes - By Center (categorical subsampling) -------------- #

rule format_tables_UKB_exomes:
    input:
        ukb_jsfs="../data/ukb_center/chr{chrom}_{group}_center_allele_frequencies.frq.strat",
        script="scripts/format_data_UKB.R",
        meta="../data/ukb23158_500k_OQFE.annotations.txt"
    output:
        formatted_sfs="../results/sfs_files/ukb_center/{scenario}/ukb_exomes.chr{chrom}.{group}.jsfs.formatted.tsv.gz",
    run:
        shell("Rscript {input.script} {input.ukb_jsfs} {output.formatted_sfs} {input.meta}")

rule subsamp_sfs_UKB_exomes:
    input:
        input_jsfs="../results/sfs_files/ukb_center/{scenario}/ukb_exomes.chr{chrom}.{group}.jsfs.formatted.tsv.gz",
    output:
        subsamp_sfs_tsv="../results/subsample_sfs/ukb_center/{scenario}/ukb_exomes.chr{chrom}.{group}.seed{seed}.nsamp{nsamp}.sfs.tsv.gz",
    params:
        poplist=["barts","birmingham","bristol","bury","cardiff","croydon","edinburgh","glasgow","hounslow","leeds","liverpool","manchester","middlesborough","newcastle","nottingham","oxford","reading","sheffield","stockport","stoke","swansea","wrexham"],
        n=lambda wildcards: int(
            config["UKBB_EXOMES"]["scenarios"][wildcards.scenario]["n"]
        ),
        props = lambda wildcards: np.array(
            [
                float(x)
                for x in config["UKBB_EXOMES"]["scenarios"][wildcards.scenario]["props"].split(",")
            ]
        ),

    script:
        "scripts/subsample_afs.py"

rule joint_sfs_filt_UKB:
    input:
        subsamp1_sfs_tsv="../results/subsample_sfs/ukb_center/{scenario1}/ukb_exomes.chr{chrom}.{group}.seed{seed}.nsamp{nsamp}.sfs.tsv.gz",
        subsamp2_sfs_tsv="../results/subsample_sfs/ukb_center/{scenario2}/ukb_exomes.chr{chrom}.{group}.seed{seed}.nsamp{nsamp}.sfs.tsv.gz",
    output:
        merged_tsv=temp(
            "../results/subsample_sfs/ukb_center/{scenario1}.{scenario2}.ukb_exomes.chr{chrom}.{group}.seed{seed}.nsamp{nsamp}.sfs.tsv.gz"
        ),
    run:
        sfs1_df = pd.read_csv(input.subsamp1_sfs_tsv, sep="\t")
        sfs2_df = pd.read_csv(input.subsamp2_sfs_tsv, sep="\t")
        for a in ["AC", "AF", "N"]:
            assert a in sfs1_df.columns
            assert a in sfs2_df.columns
        sfs1_df = sfs1_df.rename(
            columns={
                "AC": f"AC_{wildcards['scenario1']}",
                "AF": f"AF_{wildcards['scenario1']}",
                "N": f"N_{wildcards['scenario1']}",
            }
        )
        sfs2_df = sfs2_df.rename(
            columns={
                "AC": f"AC_{wildcards['scenario2']}",
                "AF": f"AF_{wildcards['scenario2']}",
                "N": f"N_{wildcards['scenario2']}",
            }
        )
        merged_sfs_df = sfs1_df.merge(sfs2_df)
        merged_sfs_df = merged_sfs_df[
            (merged_sfs_df[f"AC_{wildcards['scenario1']}"] > 0)
            | (merged_sfs_df[f"AC_{wildcards['scenario2']}"] > 0)
        ]
        merged_sfs_df.to_csv(output.merged_tsv, sep="\t", index=None)

rule concat_join_sfs_UKB:
    input:
        expand(
            "../results/subsample_sfs/ukb_center/{{scenario1}}.{{scenario2}}.ukb_exomes.{chrom}.{{group}}.seed{{seed}}.nsamp{{nsamp}}.sfs.tsv.gz",
            chrom=chroms,
        ),
    output:
        "../results/subsample_sfs/ukb_center/{scenario1}.{scenario2}.merged.ukb_exomes.{group}.seed{seed}.nsamp{nsamp}.sfs.tsv.gz",
    shell:
        "zcat {input} | awk 'NR > 1 && /^Annot/ {{ next }} 1' | gzip > {output}"


