import numpy as np

chroms = [1]
nreps = 10
nsamp = 10000
TARGETS = []

centers = ['centerE16N4', 'centerE9N9', 'centerE6N4']
w_list = [50000, 100000, 150000]  #[25000,50000,100000]
varclass = ['lof', 'synonymous', 'missense']
for vc in varclass:
    for c in centers:
        for w in w_list:
            TARGETS.append(f'data/weights/{c}geo{w}.weights')
            TARGETS.append(f'data/sir/{c}geo{w}.sir')
            for chr in chroms:
                TARGETS.append(f"results/sfs/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRsfs")
                TARGETS.append(f"results/ids/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRexamples")
                TARGETS.append(f"results/logs/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.log")
                TARGETS.append(f"results/freq/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRfreq")
                TARGETS.append(f"results/seeds/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRseeds")
                TARGETS.append(f"results/daf/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.daf")
                TARGETS.append(f"results/sfs_daf_v2/chr{chr}_{vc}_{c}geo{w}_nSIR{nsamp}_nSIRreps{nreps}.daf.sfs")
    for chr in chroms:
        TARGETS.append(f"results/sfs/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.SIRsfs")
        TARGETS.append(f"results/ids/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.SIRexamples")
        TARGETS.append(f"results/logs/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.log")
        TARGETS.append(f"results/freq/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.SIRfreq")
        TARGETS.append(f"results/seeds/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.SIRseeds")
        TARGETS.append(f"results/daf/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.daf")
        TARGETS.append(f"results/sfs_daf_v2/chr{chr}_{vc}_uniformgeo_nSIR{nsamp}_nSIRreps{nreps}.daf.sfs")
        TARGETS.append(f"data/chr{chr}_ukb_all_kao.frqx")

TARGETS.append("data/weights/uniformgeo.weights")
TARGETS.append("data/sir/uniformgeo.sir")
TARGETS.append("metadata/metadata_cleaned_wes.csv")
TARGETS.append("data/sir.clst")

centers_pca = ['centerX19Y4']#,'centerX0Y0','centerX12Y19']
w_list_pca = [0.0015,0.0025,0.005]#[0.0005,0.0025,0.005]
for vc in varclass:
    for c in centers_pca:
        for w in w_list_pca:
            TARGETS.append(f'data/weights/{c}pca{w}.weights')
            TARGETS.append(f'data/sir/{c}pca{w}.sir')
            for chr in chroms:
                TARGETS.append(f"results/sfs/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRsfs")
                TARGETS.append(f"results/ids/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRexamples")
                TARGETS.append(f"results/logs/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.log")
                TARGETS.append(f"results/freq/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRfreq")
                TARGETS.append(f"results/seeds/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.SIRseeds")
                TARGETS.append(f"results/daf/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.daf")
                TARGETS.append(f"results/sfs_daf_v2/chr{chr}_{vc}_{c}pca{w}_nSIR{nsamp}_nSIRreps{nreps}.daf.sfs")
    for chr in chroms:
        TARGETS.append(f"results/sfs/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.SIRsfs")
        TARGETS.append(f"results/ids/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.SIRexamples")
        TARGETS.append(f"results/logs/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.log")
        TARGETS.append(f"results/freq/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.SIRfreq")
        TARGETS.append(f"results/seeds/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.SIRseeds")
        TARGETS.append(f"results/daf/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.daf")
        TARGETS.append(f"results/sfs_daf_v2/chr{chr}_{vc}_uniformpca_nSIR{nsamp}_nSIRreps{nreps}.daf.sfs")
TARGETS.append("data/weights/uniformpca.weights")
TARGETS.append("data/sir/uniformpca.sir")
TARGETS = np.unique(TARGETS).tolist()
weights_files_geo = [item for item in TARGETS if item.endswith('.weights') and 'geo' in item]
weights_files_pca = [item for item in TARGETS if item.endswith('.weights') and 'pca' in item]

rule all:
    input:
        TARGETS,

rule download_metadata:
    input:
    output:
        meta_file = "metadata/participant_metadata_all.csv", \
        wes_ids = "metadata/wes_ids.txt"
    shell:
        "bash scripts/metadata.sh"

rule clean_metadata:
    input:
        meta_file="metadata/participant_metadata_all.csv",
        wes_ids="metadata/wes_ids.txt",
        pcs="metadata/ukb_pca_plink2.eigenvec",# see PCA directory,
        coding10="metadata/codings/coding10.tsv",# from UKB
        coding100420="metadata/codings/coding100420.tsv",# from UKB
    output:
        meta_clean="metadata/metadata_cleaned_wes.csv"
    params:
        eps_pca=0.0001,
    script:
        "scripts/clean_metadata.py"

rule get_weights_files_geo:
    input:
        meta_clean="metadata/metadata_cleaned_wes.csv"
    params:
        center_list=centers,
        w_list=w_list,
    output:
        weights_files_geo
    script:
        "scripts/gen_weights_SIR.py"

rule get_weights_files_pca:
    input:
        meta_clean="metadata/metadata_cleaned_wes.csv"
    params:
        center_list=centers_pca,
        w_list=w_list_pca,
    output:
        weights_files_pca
    script:
        "scripts/gen_weights_SIR_pca.py"

### for fam_order.txt
# dx run app-swiss-army-knife -y --wait \
#         -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c22_b0_v1.fam \
#         -icmd="awk '{print \$1}' ukb23158_c22_b0_v1.fam > fam_order.txt"
# dx download fam_order.txt

rule get_sir_files:
    input:
        weights="data/weights/{scenario}.weights",
        fam_order="metadata/fam_order.txt"
    output:
        sir="data/sir/{scenario}.sir"
    script:
        "scripts/gen_sir.py"

rule get_clst_file:
    input:
        fam_order="metadata/fam_order.txt"
    output:
        clst="data/sir.clst"
    script:
        "scripts/gen_clst.py"

# dx upload sir.clst
# dx upload *.sir
# dx upload lofvars.txt

rule filter_lof:
    input:
        lofvars='metadata/lofvars.txt'
    output:
        indicator='metadata/indicators/chr{chrom}_lof.txt'
    shell:
        """
        dx run app-swiss-army-knife -y --wait \
            -iin=lofvars.txt \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bed \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bim \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.fam \
            -icmd='plink --bfile ukb23158_c{wildcards.chrom}_b0_v1 --extract lofvars.txt --make-bed --out chr{wildcards.chrom}_lof --snps-only just-acgt'
        touch metadata/indicators/chr{wildcards.chrom}_lof.txt
        """

rule filter_synonymous:
    input:
        synvars='metadata/synonymousvars.txt'
    output:
        indicator='metadata/indicators/chr{chrom}_synonymous.txt'
    params:
        nvariants=32320, ### UPDATED
    shell:
        """
        dx run app-swiss-army-knife -y --wait \
            -iin=synonymousvars.txt \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bed \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bim \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.fam \
            -icmd='plink --bfile ukb23158_c{wildcards.chrom}_b0_v1 --extract synonymousvars.txt --thin-count {params.nvariants} --make-bed --out chr{wildcards.chrom}_synonymous --snps-only just-acgt'
        touch metadata/indicators/chr{wildcards.chrom}_synonymous.txt
        """

rule filter_missense:
    input:
        synvars='metadata/missensevars.txt'
    output:
        indicator='metadata/indicators/chr{chrom}_missense.txt'
    params:
        nvariants=32320, ### UPDATED
    shell:
        """
        dx run app-swiss-army-knife -y --wait \
            -iin=missensevars.txt \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bed \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bim \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.fam \
            -icmd='plink --bfile ukb23158_c{wildcards.chrom}_b0_v1 --extract missensevars.txt --thin-count {params.nvariants} --make-bed --out chr{wildcards.chrom}_missense --snps-only just-acgt'
        touch metadata/indicators/chr{wildcards.chrom}_missense.txt
        """

rule run_scatter:
    input:
        indicator='metadata/indicators/chr{chrom}_lof.txt',
        indicator_syn='metadata/indicators/chr{chrom}_synonymous.txt',
        indicator_mis='metadata/indicators/chr{chrom}_missense.txt',
        clst="data/sir.clst",
        sir="data/sir/{scenario}.sir"
    output:
        sfs="results/sfs/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.SIRsfs",
        ids="results/ids/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.SIRexamples",
        log="results/logs/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.log",
        freq="results/freq/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.SIRfreq",
        seeds="results/seeds/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.SIRseeds"
    shell:
        """
        dx run scatter2 -y --wait \
            --instance-type "mem1_ssd1_v2_x36" \
            -ibimfile=chr{wildcards.chrom}_{wildcards.varclass}.bim \
            -ibedfile=chr{wildcards.chrom}_{wildcards.varclass}.bed \
            -ifamfile=chr{wildcards.chrom}_{wildcards.varclass}.fam \
            -iclst=sir.clst \
            -isir={wildcards.scenario}.sir \
            -iout=chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps} \
            -iplink_prefix='chr{wildcards.chrom}_{wildcards.varclass}' \
            -iclst_prefix='sir' \
            -isir_prefix='{wildcards.scenario}' \
            -icmd='scatter_v2 --bfile chr{wildcards.chrom}_{wildcards.varclass} --clst sir.clst --SIR {wildcards.scenario}.sir --out chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps} --nSIR {wildcards.nsamp} --nSIRreps {wildcards.nreps} --debug'
        dx download chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRsfs
        dx download chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRexamples
        dx download chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.log
        dx download chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRfreq
        dx download chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRseeds

        mv chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRsfs results/sfs
        mv chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRexamples results/ids
        mv chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.log results/logs
        mv chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRfreq results/freq
        mv chr{wildcards.chrom}_{wildcards.varclass}_{wildcards.scenario}_nSIR{wildcards.nsamp}_nSIRreps{wildcards.nreps}.SIRseeds results/seeds
        """

rule extract_ancestral_alleles:
    input:
        fasta="metadata/homo_sapiens_ancestor_GRCh38/homo_sapiens_ancestor_1.fa",# Your FASTA file
    output:
        anc="metadata/ancestral_vars_chr1.txt",# Output file for ancestral alleles
    script:
        'scripts/extract_ancestral.py'

rule extract_reference_alleles:
    input:
        fasta="metadata/grch38_chr1_ref.fasta"
    output:
        ref="metadata/ref_vars_grch38_chr1.txt",
    script:
        'scripts/extract_ancestral.py'

rule derived_allele_freq:
    input:
        anc_alleles_file_clean="metadata/ancestral_vars_chr1.txt",
        frq_file_snv="results/freq/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.SIRfreq"
    output:
        daf_snv="results/daf/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.daf"
    script:
        'scripts/calc_daf.py'

rule chrom_freqs_all:
    input:
    output:
        chr1_freqs="data/chr{chrom}_ukb_all_kao.frqx",
    shell:
        """
        dx run app-swiss-army-knife -y --wait \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bed \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bim \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.fam \
            -icmd='plink --bfile ukb23158_c{wildcards.chrom}_b0_v1 --keep-allele-order --snps-only just-acgt --freqx --out chr{wildcards.chrom}_ukb_all_kao'
        dx download chr{wildcards.chrom}_ukb_all_kao.frqx
        mv chr{wildcards.chrom}_ukb_all_kao.frqx data
        """

rule chrom_freqs_WB:
    input:
        ids='data/WB_seed0_n1000.tsv'
    output:
        chr1_freqs="data/chr{chrom}_ukb_WB_kao.frqx",
    shell:
        """
        dx run app-swiss-army-knife -y --wait \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bed \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bim \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.fam \
            -iin=WB_seed0_n1000.tsv \
            -icmd='plink --bfile ukb23158_c{wildcards.chrom}_b0_v1 --keep-allele-order --keep WB_seed0_n1000.tsv --snps-only just-acgt --freqx --out chr{wildcards.chrom}_ukb_WB_kao'
        dx download chr{wildcards.chrom}_ukb_WB_kao.frqx
        mv chr{wildcards.chrom}_ukb_WB_kao.frqx data
        """

rule chrom_freqs_AFR:
    input:
        ids = 'data/AFR_seed0_n1000.tsv'
    output:
        chr1_freqs="data/chr{chrom}_ukb_AFR_kao.frqx",
    shell:
        """
        dx run app-swiss-army-knife -y --wait \
            -iin=AFR_seed0_n1000.tsv \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bed \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.bim \
            -iin=Rare\ Variants\ in\ Space:/Bulk/Exome\ sequences/Population\ level\ exome\ OQFE\ variants,\ PLINK\ format\ -\ final\ release/ukb23158_c{wildcards.chrom}_b0_v1.fam \
            -icmd='plink --bfile ukb23158_c{wildcards.chrom}_b0_v1 --keep-allele-order --keep AFR_seed0_n1000.tsv --snps-only just-acgt --freqx --out chr{wildcards.chrom}_ukb_AFR_kao'
        dx download chr{wildcards.chrom}_ukb_AFR_kao.frqx
        mv chr{wildcards.chrom}_ukb_AFR_kao.frqx data
        """

rule sfs_daf_v2:
    input:
        daf = "results/daf/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.daf"
    output:
        sfs_daf = "results/sfs_daf_v2/chr{chrom}_{varclass}_{scenario}_nSIR{nsamp}_nSIRreps{nreps}.daf.sfs"
    run:
        import pandas as pd
        import numpy as np

        df = pd.read_csv(input.daf,sep="\t")
        df = df[df['MAF']>0] # remove for v1
        df["OBS_N"] = (df["Derived_Frequency"] * df["NOBS"]).round().astype(int)
        obs_n_values = np.arange(0,2 * int(wildcards.nsamp) + 1)
        sir_rep_values = df["ITER"].unique()

        complete_combinations = pd.MultiIndex.from_product([sir_rep_values, obs_n_values],names=["SIR_REP", "OBS_N"])

        complete_combinations_df = pd.DataFrame(index=complete_combinations).reset_index()
        # print(complete_combinations_df)

        df["SIR_REP"] = df["ITER"]
        df.drop(columns=["ITER"],inplace=True)
        sfs = df.groupby(["SIR_REP", "OBS_N"]).size().reset_index(name="COUNT_SITES")
        sfs_complete = pd.merge(complete_combinations_df,sfs,on=["SIR_REP","OBS_N"],how="left")
        sfs_complete["COUNT_SITES"].fillna(0,inplace=True)
        sfs_complete.to_csv(output.sfs_daf,sep="\t",index=False)


