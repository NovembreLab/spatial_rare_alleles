initialize() {
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T,dimensionality="xy");
	
	defineConstant("s",-0.2);
	defineConstant("sigma",0.2);
	defineConstant("W",30);
	defineConstant("mu",1e-10); 
	defineConstant("K",5);
	defineConstant("SD", sigma);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity
	defineConstant("G", 1e8);  // genome length
	defineConstant("FECUN", 1/L); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function	
	
	
	initializeMutationType("m1", 0.5, "f", s); // fixed 
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(mu);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
	i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
	
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);
	
	defineConstant("GENTIME", rep(NAN, 100));
	defineConstant("AGE", rep(NAN, 100));

}

reproduction() {
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		// record pair of parents and some useful numbers
		line = paste(s/2,sim.cycle,individual.pedigreeID,individual.countOfMutationsOfType(1),mate.pedigreeID,mate.countOfMutationsOfType(1),nOff);
		writeFile("spatial_parents.txt", line, append=T);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD);
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(pos);
			}
		}
	}
	return;
}

1 early() {
	sim.addSubpop("p1", asInteger(K * W * W));
	p1.setSpatialBounds(c(0.0, 0.0, W, W));
	for (ind in p1.individuals) {
		ind.setSpatialPosition(p1.pointUniform());
	}
	i1.evaluate(sim.subpopulations);
}

early() {
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
	// scale fitness at edges
	inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
	if (sim.cycle%10==0){
		cat("still running at generation ");
		cat(sim.cycle);
		cat(".\n");
	}
}

1: late() {
	// this should happen *after* mortality (so, in late())
	GENTIME[sim.cycle - 1] = mean(p1.individuals.meanParentAge);
	AGE[sim.cycle - 1]= mean(p1.individuals.age);
}

1: late() {
	// some statistics...

	catn(paste("Generation:", sim.cycle));
	individuals=p1.individuals;
	// num individuals carrying more than one mutation
	carry_multiple_mutations = sum(p1.individuals.countOfMutationsOfType(1)>1);	
	// num carriers	
	carriers = individuals[p1.individuals.countOfMutationsOfType(1)>0];
	// num noncarriers
	noncarriers = individuals[p1.individuals.countOfMutationsOfType(1)==0];
	// carrier reproductive output
	lroc=mean(carriers.reproductiveOutput);
	// noncarrier reproductive output
	lronc=mean(noncarriers.reproductiveOutput);
	// fitness
	fit=mean(p1.cachedFitness(NULL)); 
}

100 late() {
	catn("Done! Mean generation time " + mean(GENTIME[50:99]));
	sim.simulationFinished();
}
